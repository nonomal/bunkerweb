apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  annotations:
    bunkerweb.io/AUTO_LETS_ENCRYPT: "yes"
    bunkerweb.io/REVERSE_PROXY_URL_999: "/authelia"
    bunkerweb.io/REVERSE_PROXY_HOST_999: "http://svc-authelia.default.svc.cluster.local:9091/api/verify"
    bunkerweb.io/REVERSE_PROXY_HEADERS_999: "X-Original-URL $scheme://$http_host$request_uri;Content-Length ''"
    bunkerweb.io/app1.example.com_REVERSE_PROXY_AUTH_REQUEST: "/authelia"
    bunkerweb.io/app1.example.com_REVERSE_PROXY_AUTH_REQUEST_SIGNIN_URL: "https://auth.example.com/?rd=$scheme%3A%2F%2F$host$request_uri"
    bunkerweb.io/app1.example.com_REVERSE_PROXY_AUTH_REQUEST_SET: "$user $upstream_http_remote_user;$groups $upstream_http_remote_groups;$name $upstream_http_remote_name;$email $upstream_http_remote_email"
    bunkerweb.io/app1.example.com_REVERSE_PROXY_HEADERS: "Remote-User $user;Remote-Groups $groups;Remote-Name $name;Remote-Email $email"
    bunkerweb.io/app2.example.com_REVERSE_PROXY_AUTH_REQUEST: "/authelia"
    bunkerweb.io/app2.example.com_REVERSE_PROXY_AUTH_REQUEST_SIGNIN_URL: "https://auth.example.com/?rd=$scheme%3A%2F%2F$host$request_uri"
    bunkerweb.io/app2.example.com_REVERSE_PROXY_AUTH_REQUEST_SET: "$user $upstream_http_remote_user;$groups $upstream_http_remote_groups;$name $upstream_http_remote_name;$email $upstream_http_remote_email"
    bunkerweb.io/app2.example.com_REVERSE_PROXY_HEADERS: "Remote-User $user;Remote-Groups $groups;Remote-Name $name;Remote-Email $email"
    bunkerweb.io/auth.example.com_REVERSE_PROXY_INTERCEPT_ERRORS: "no"
spec:
  rules:
    - host: app1.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: svc-app1
                port:
                  number: 80
    - host: app2.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: svc-app2
                port:
                  number: 80
    - host: auth.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: svc-authelia
                port:
                  number: 9091
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  labels:
    app: app1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app1
  template:
    metadata:
      labels:
        app: app1
    spec:
      containers:
        - name: app1
          image: nginxdemos/nginx-hello
---
apiVersion: v1
kind: Service
metadata:
  name: svc-app1
spec:
  selector:
    app: app1
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app2
  labels:
    app: app2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app2
  template:
    metadata:
      labels:
        app: app2
    spec:
      containers:
        - name: app2
          image: nginxdemos/nginx-hello
---
apiVersion: v1
kind: Service
metadata:
  name: svc-app2
spec:
  selector:
    app: app2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfg-authelia
data:
  configuration.yml: |
    ---
    ###############################################################
    #                   Authelia configuration                    #
    ###############################################################

    jwt_secret: a_very_important_secret
    default_redirection_url: https://auth.example.com

    ntp:
      disable_failure: true

    server:
      host: 0.0.0.0
      port: 9091

    log:
      level: debug
    # This secret can also be set using the env variables AUTHELIA_JWT_SECRET_FILE

    totp:
      issuer: authelia.com

    # duo_api:
    #  hostname: api-123456789.example.com
    #  integration_key: ABCDEF
    #  # This secret can also be set using the env variables AUTHELIA_DUO_API_SECRET_KEY_FILE
    #  secret_key: 1234567890abcdefghifjkl

    authentication_backend:
      file:
        path: /config/users_database.yml

    access_control:
      default_policy: deny
      rules:
        # Rules applied to everyone
        - domain: auth.example.com
          policy: bypass
        - domain: app1.example.com
          policy: one_factor
        - domain: app2.example.com
          policy: two_factor

    session:
      name: authelia_session
      # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET_FILE
      secret: unsecure_session_secret
      expiration: 3600  # 1 hour
      inactivity: 300  # 5 minutes
      domain: example.com  # Should match whatever your root protected domain is

      redis:
        host: svc-redis
        port: 6379
        # This secret can also be set using the env variables AUTHELIA_SESSION_REDIS_PASSWORD_FILE
        # password: authelia

    regulation:
      max_retries: 3
      find_time: 120
      ban_time: 300

    storage:
      encryption_key: you_must_generate_a_random_string_of_more_than_twenty_chars_and_configure_this
      local:
        path: /config/db.sqlite3

    notifier:
      filesystem:
        filename: /config/notification.txt
    #notifier:
    #  smtp:
    #    username: test
        # This secret can also be set using the env variables AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
    #    password: password
    #    host: mail.example.com
    #    port: 25
    #    sender: admin@example.com
    ...
  users_database.yml: |
    ---
    ###############################################################
    #                         Users Database                      #
    ###############################################################

    # This file can be used if you do not have an LDAP set up.

    # List of users
    users:
      authelia:
        displayname: "Authelia User"
        # Password is authelia
        password: "$6$rounds=50000$BpLnfgDsc2WD8F2q$Zis.ixdg9s/UOJYrs56b5QEZFiZECu0qZVNsIYxBaNJ7ucIL.nlxVCT5tqh8KHG8X4tlwCFm5r6NTOZZ5qRFN/"  # yamllint disable-line rule:line-length
        email: authelia@authelia.com
        groups:
          - admins
          - dev
    ...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authelia
  labels:
    app: authelia
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authelia
  template:
    metadata:
      labels:
        app: authelia
    spec:
      containers:
        - name: authelia
          image: authelia/authelia:4
          env:
            - name: TZ
              value: "Europe/Paris"
          volumeMounts:
            - name: config
              mountPath: /config/configuration.yml
              subPath: configuration.yml
            - name: config
              mountPath: /config/users_database.yml
              subPath: users_database.yml
      volumes:
        - name: config
          configMap:
            name: cfg-authelia
---
apiVersion: v1
kind: Service
metadata:
  name: svc-authelia
spec:
  selector:
    app: authelia
  ports:
    - protocol: TCP
      port: 9091
      targetPort: 9091
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          env:
            - name: TZ
              value: "Europe/Paris"
---
apiVersion: v1
kind: Service
metadata:
  name: svc-redis
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfg-bunkerweb-auth-modsec
  annotations:
    bunkerweb.io/CONFIG_TYPE: "modsec"
    bunkerweb.io/CONFIG_SITE: "auth.example.com"
data:
  remove-false-positives: |
    SecRule REQUEST_FILENAME "/" "id:1000000,ctl:ruleRemoveByTag=attack-lfi,nolog"
