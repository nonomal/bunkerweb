log_by_lua_block {
	local clogger    = require "bunkerweb.logger"
	local helpers    = require "bunkerweb.helpers"
	local cdatastore = require "bunkerweb.datastore"
	local utils      = require "bunkerweb.utils"
	local cjson		 = require "cjson"

	local ngx = ngx
	local ERR = ngx.ERR
	local INFO = ngx.INFO
	local fill_ctx = helpers.fill_ctx
	local get_reason = utils.get_reason
	local require_plugin = helpers.require_plugin
	local new_plugin = helpers.new_plugin
	local call_plugin = helpers.call_plugin
	local tostring = tostring
	local encode = cjson.encode

	-- Start log phase
	local logger     = clogger:new("LOG")
	local datastore  = cdatastore:new()
	logger:log(INFO, "log phase started")

	-- Fill ctx
	logger:log(INFO, "filling ngx.ctx ...")
	local ok, ret, errors, ctx = fill_ctx()
	if not ok then
		logger:log(ERR, "fill_ctx() failed : " .. ret)
	elseif errors then
		for i, error in ipairs(errors) do
			logger:log(ERR, "fill_ctx() error " .. tostring(i) .. " : " .. error)
		end
	end
	logger:log(INFO, "ngx.ctx filled (ret = " .. ret .. ")")

	-- Get plugins order
	local order, err = datastore:get("plugins_order", true)
	if not order then
		logger:log(ERR, "can't get plugins order from datastore : " .. err)
		return
	end

	-- Call log() methods
	logger:log(INFO, "calling log() methods of plugins ...")
	for i, plugin_id in ipairs(order.log) do
		-- Require call
		local plugin_lua, err = require_plugin(plugin_id)
		if plugin_lua == false then
			logger:log(ERR, err)
		elseif plugin_lua == nil then
			logger:log(INFO, err)
		else
			-- Check if plugin has log method
			if plugin_lua.log ~= nil then
				-- New call
				local ok, plugin_obj = new_plugin(plugin_lua, ctx)
				if not ok then
					logger:log(ERR, plugin_obj)
				else
					local ok, ret = call_plugin(plugin_obj, "log")
					if not ok then
						logger:log(ERR, ret)
					elseif not ret.ret then
						logger:log(ERR, plugin_id .. ":log() call failed : " .. ret.msg)
					else
						logger:log(INFO, plugin_id .. ":log() call successful : " .. ret.msg)
					end
				end
			else
				logger:log(INFO, "skipped execution of " .. plugin_id .. " because method log() is not defined")
			end
		end
	end
	logger:log(INFO, "called log() methods of plugins")

	-- Display reason at info level
	local reason, reason_data, security_mode = get_reason(ctx)
	if reason then
		if security_mode == "block" then
			logger:log(INFO, "client was denied with reason " .. reason .. " and data = " .. encode(reason_data))
		else
			logger:log(INFO, "detected client deny with reason " .. reason .. " and data = " .. encode(reason_data))
		end
	end

	logger:log(INFO, "log phase ended")
}
