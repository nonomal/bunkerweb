server {

	# variables
	set $reason '';
	set $reason_data '';
	set $ctx_ref '';

	server_name _;

	# HTTP listen
{% if LISTEN_HTTP == "yes" %}
	{% set common_options = " default_server" %}
	{% if USE_PROXY_PROTOCOL == "yes" %}
		{% set common_options = common_options ~ " proxy_protocol" %}
	{% endif %}
	{% for k, port in all.items() if k.startswith("HTTP_PORT") %}
	listen 0.0.0.0:{{ port }}{{ common_options }};
		{% if USE_IPV6 == "yes" %}
	listen [::]:{{ port }}{{ common_options }};
		{% endif %}
	{% endfor %}
{% endif %}

	# HTTPS listen
{% set os = import("os") %}
{% if os.path.isfile("/var/cache/bunkerweb/misc/default-server-cert.pem") +%}
	ssl_protocols {{ SSL_PROTOCOLS }};
	{% if SSL_PROTOCOLS == "TLSv1.3" %}
	ssl_prefer_server_ciphers off;
	{% else %}
	ssl_prefer_server_ciphers on;
	{% endif %}
	ssl_session_tickets off;
	ssl_session_timeout 1d;
	ssl_session_cache shared:MozSSL:10m;
	{% if "TLSv1.2" in SSL_PROTOCOLS +%}
	ssl_dhparam /etc/nginx/dhparam;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	{% endif %}
	ssl_certificate /var/cache/bunkerweb/misc/default-server-cert.pem;
	ssl_certificate_key /var/cache/bunkerweb/misc/default-server-cert.key;
	{% if HTTP2 == "yes" %}
	http2 on;
	{% endif %}
	{% set common_options = " ssl default_server" %}
	{% if USE_PROXY_PROTOCOL == "yes" %}
		{% set common_options = common_options ~ " proxy_protocol" %}
	{% endif %}
	{% for k, port in all.items() if k.startswith("HTTPS_PORT") %}
	listen 0.0.0.0:{{ port }}{{ common_options }};
		{% if USE_IPV6 == "yes" %}
	listen [::]:{{ port }}{{ common_options }};
		{% endif %}
	{% endfor %}

	{% if "TLSv1.3" in SSL_PROTOCOLS and HTTP3 == "yes" and USE_PROXY_PROTOCOL == "no" %}
	http3 on;
		{% for k, port in all.items() if k.startswith("HTTPS_PORT") %}
	listen 0.0.0.0:{{ port }} quic default_server;
			{% if USE_IPV6 == "yes" %}
	listen [::]:{{ port }} quic default_server;
			{% endif %}
		{% endfor %}
	add_header Alt-Svc 'h3=":{{ HTTP3_ALT_SVC_PORT }}"; ma=86400';
	{% endif %}
{% endif %}

{% if IS_LOADING == "yes" +%}
	location / {
		etag off;
		add_header Last-Modified "";
		server_tokens off;
		default_type 'text/html';
		root /usr/share/bunkerweb/loading;
		content_by_lua_block {
				local utils = require "bunkerweb.utils"
				local rand = utils.rand
				local subsystem = ngx.config.subsystem

				local template
				local render = nil
				if subsystem == "http" then
					template = require "resty.template"
					render = template.render
				end

				local nonce_style = rand(32)
				local nonce_script = rand(32)

				-- Override CSP header
				ngx.header["Content-Security-Policy"] = "default-src 'none'; script-src 'strict-dynamic' 'nonce-"
						.. nonce_script
						.. "'; style-src 'nonce-"
						.. nonce_style
						.. "'; frame-ancestors 'none'; base-uri 'none'; img-src data:; font-src data:; require-trusted-types-for 'script';"

				-- Remove server header
				ngx.header["Server"] = nil

				-- Override HSTS header
				if ngx.var.scheme == "https" then
					ngx.header["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains; preload"
					ngx.header["Content-Security-Policy"] = ngx.header["Content-Security-Policy"] .. " upgrade-insecure-requests;"
				end

				-- Override X-Content-Type-Options header
				ngx.header["X-Content-Type-Options"] = "nosniff"

				-- Override Referrer-Policy header
				ngx.header["Referrer-Policy"] = "no-referrer"

				-- Override Permissions-Policy header
				ngx.header["Permissions-Policy"] = "accelerometer=(), ambient-light-sensor=(), attribution-reporting=(), autoplay=(), battery=(), bluetooth=(), browsing-topics=(), camera=(), compute-pressure=(), display-capture=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), identity-credentials-get=(), idle-detection=(), local-fonts=(), magnetometer=(), microphone=(), midi=(), otp-credentials=(), payment=(), picture-in-picture=(), publickey-credentials-create=(), publickey-credentials-get=(), screen-wake-lock=(), serial=(), speaker-selection=(), storage-access=(), usb=(), web-share=(), window-management=(), xr-spatial-tracking=(), interest-cohort=()"

				-- Override Content-Type header
				ngx.header["Content-Type"] = "text/html; charset=utf-8"

				-- Override Cache-Control header
				ngx.header["Cache-Control"] = "no-cache, no-store, must-revalidate"

				-- Render template
				render("index.html", {
					nonce_style = nonce_style,
					nonce_script = nonce_script
				})
		}
	}
{% endif %}

	# include core and plugins default-server configurations
	include /etc/nginx/default-server-http/*.conf;

	# include custom default-server configurations
	include /etc/bunkerweb/configs/default-server-http/*.conf;

	log_by_lua_block {

		local utils			= require "bunkerweb.utils"
		local clogger		= require "bunkerweb.logger"
		local cdatastore	= require "bunkerweb.datastore"
		local helpers		= require "bunkerweb.helpers"
		local cjson			= require "cjson"

		local ngx = ngx
		local INFO = ngx.INFO
		local ERR = ngx.ERR
		local fill_ctx = helpers.fill_ctx
		local tostring = tostring
		local get_reason = utils.get_reason
		local require_plugin = helpers.require_plugin
		local new_plugin = helpers.new_plugin
		local call_plugin = helpers.call_plugin

		-- Start log phase
		local logger	= clogger:new("LOG-DEFAULT")
		local datastore	= cdatastore:new()
		logger:log(INFO, "log_default phase started")

		-- Fill ctx
		logger:log(INFO, "filling ngx.ctx ...")
		local ok, ret, errors, ctx = fill_ctx()
		if not ok then
			logger:log(ERR, "fill_ctx() failed : " .. ret)
		elseif errors then
			for i, error in ipairs(errors) do
				logger:log(ERR, "fill_ctx() error " .. tostring(i) .. " : " .. error)
			end
		end
		logger:log(INFO, "ngx.ctx filled (ret = " .. ret .. ")")

		-- Get plugins order
		local order, err = datastore:get("plugins_order", true)
		if not order then
			logger:log(ERR, "can't get plugins order from datastore : " .. err)
			return
		end

		-- Call log_default() methods
		logger:log(INFO, "calling log_default() methods of plugins ...")
		for i, plugin_id in ipairs(order.log_default) do
			-- Require call
			local plugin_lua, err = require_plugin(plugin_id)
			if plugin_lua == false then
				logger:log(ERR, err)
			elseif plugin_lua == nil then
				logger:log(INFO, err)
			else
				-- Check if plugin has log method
				if plugin_lua.log_default ~= nil then
					-- New call
					local ok, plugin_obj = new_plugin(plugin_lua, ctx)
					if not ok then
						logger:log(ERR, plugin_obj)
					else
						local ok, ret = call_plugin(plugin_obj, "log_default")
						if not ok then
							logger:log(ERR, ret)
						elseif not ret.ret then
							logger:log(ERR, plugin_id .. ":log_default() call failed : " .. ret.msg)
						else
							logger:log(INFO, plugin_id .. ":log_default() call successful : " .. ret.msg)
						end
					end
				else
					logger:log(INFO, "skipped execution of " .. plugin_id .. " because method log_default() is not defined")
				end
			end
		end
		logger:log(INFO, "called log_default() methods of plugins")

		-- Display reason at info level
		local reason = get_reason(ctx)
		if reason then
			logger:log(INFO, "client was denied with reason : " .. reason)
		end

		logger:log(INFO, "log_default phase ended")

	}

}
