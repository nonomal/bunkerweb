lua_shared_dict worker_lock {{ WORKERLOCK_MEMORY_SIZE }};

init_worker_by_lua_block {
	-- Libs
	local helpers = require "bunkerweb.helpers"
	local utils = require "bunkerweb.utils"
	local ngx = ngx
	local ERR = ngx.ERR
	local INFO = ngx.INFO
	local worker = ngx.worker
	local worker_id = worker.id
	local worker_pid = worker.pid
	local timer_at = ngx.timer.at
	local require_plugin = helpers.require_plugin
	local new_plugin = helpers.new_plugin
	local call_plugin = helpers.call_plugin
	local get_variable = utils.get_variable
	local tostring = tostring
	local remove = os.remove
	local time = os.time
	local randomseed = math.randomseed

	-- Instantiate objects
	local logger = require "bunkerweb.logger":new("INIT-WORKERS-" .. tostring(worker_id()))
	local datastore = require "bunkerweb.datastore":new()

	-- Random seed
	randomseed(time() + worker_pid())

	-- Don't go further we are in loading state
	local is_loading, err = get_variable("IS_LOADING", false)
	if not is_loading then
		logger:log(ERR, "utils.get_variable() failed : " .. err)
		return
	elseif is_loading == "yes" then
		return
	end

	logger:log(INFO, "init_workers phase started")

	-- Get plugins order
	local order, err = datastore:get("plugins_order", true)
	if not order then
		logger:log(ERR, "can't get plugins order from datastore : " .. err)
		return
	end

	-- Call init_workers() methods
	logger:log(INFO, "calling init_workers() methods of plugins ...")
	for i, plugin_id in ipairs(order.init_workers) do
		-- Require call
		local plugin_lua, err = require_plugin(plugin_id)
		if plugin_lua == false then
			logger:log(ERR, err)
		elseif plugin_lua == nil then
			logger:log(INFO, err)
		else
			-- Check if plugin has init_worker method
			if plugin_lua.init_workers ~= nil then
				-- New call
				local ok, plugin_obj = new_plugin(plugin_lua)
				if not ok then
					logger:log(ERR, plugin_obj)
				else
					local ok, ret = call_plugin(plugin_obj, "init_workers")
					if not ok then
						logger:log(ERR, ret)
					elseif not ret.ret then
						logger:log(ERR, plugin_id .. ":init_workers() call failed : " .. ret.msg)
					else
						logger:log(INFO, plugin_id .. ":init_workers() call successful : " .. ret.msg)
					end
				end
			else
				logger:log(INFO, "skipped execution of " .. plugin_id .. " because method init_workers() is not defined")
			end
		end
	end
	logger:log(INFO, "called init_workers() methods of plugins")

	-- End
	logger:log(INFO, "init_workers phase ended")

	-- Our timer function
	local ready_work = function(premature)
		-- Libs
		local helpers = require "bunkerweb.helpers"
		local utils = require "bunkerweb.utils"

		-- Instantiate objects
		local logger = require "bunkerweb.logger":new("INIT-WORKER")
		local datastore = require "bunkerweb.datastore":new()

		local ngx = ngx
		local INFO = ngx.INFO
		local ERR = ngx.ERR
		local WARN = ngx.WARN
		local NOTICE = ngx.NOTICE
		local worker = ngx.worker
		local worker_id = worker.id
		local timer_at = ngx.timer.at
		local require_plugin = helpers.require_plugin
		local new_plugin = helpers.new_plugin
		local call_plugin = helpers.call_plugin
		local tostring = tostring
		local get_variable = utils.get_variable

		-- Don't go further we are in loading state
		local is_loading, err = get_variable("IS_LOADING", false)
		if not is_loading then
			logger:log(ERR, "utils.get_variable() failed : " .. err)
			return
		elseif is_loading == "yes" then
			return
		end

		-- Recurrent timer
		local recurrent_timer
		local timers_log_level = ngx[utils.get_variable("TIMERS_LOG_LEVEL", false):upper()]
		recurrent_timer = function(premature)

			local worker_id = tostring(worker.id())
			local logger = require "bunkerweb.logger":new("TIMER-" .. worker_id)

			-- Worker exiting
			if premature then
				logger:log(WARN, "worker is exiting, disabling timer")
				return
			end
			logger:log(timers_log_level, "timer started")

			-- Get plugins order
			local order, err = datastore:get("plugins_order", true)
			if not order then
				logger:log(ERR, "can't get plugins order from datastore : " .. err)
				return
			end

			-- Call timer() methods
			logger:log(timers_log_level, "calling timer() methods of plugins ...")
			for i, plugin_id in ipairs(order.timer) do
				-- Require call
				local plugin_lua, err = require_plugin(plugin_id)
				if plugin_lua == false then
					logger:log(ERR, err)
				elseif plugin_lua == nil then
					logger:log(timers_log_level, err)
				else
					-- Check if plugin has timer method
					if plugin_lua.timer ~= nil then
						-- New call
						local ok, plugin_obj = new_plugin(plugin_lua)
						if not ok then
							logger:log(ERR, plugin_obj)
						else
							local ok, ret = call_plugin(plugin_obj, "timer")
							if not ok then
								logger:log(ERR, ret)
							elseif not ret.ret then
								logger:log(ERR, plugin_id .. ":timer() call failed : " .. ret.msg)
							else
								logger:log(timers_log_level, plugin_id .. ":timer() call successful : " .. ret.msg)
							end
						end
					else
						logger:log(timers_log_level, "skipped execution of " .. plugin_id .. " because method timer() is not defined")
					end
				end
			end
			logger:log(timers_log_level, "called timer() methods of plugins")
			local hdl
			hdl, err = timer_at(5, recurrent_timer)
			if not hdl then
				logger:log(ERR, "can't create timer : " .. err)
			end
		end
		local hdl
		hdl, err = timer_at(0, recurrent_timer)
		if not hdl then
			logger:log(ERR, "can't create timer : " .. err)
		end

		-- Instantiate lock
		local lock = require "resty.lock":new("worker_lock", { timeout = 10 })
		if not lock then
			logger:log(ERR, "lock:new() failed : " .. err)
			return
		end

		-- Acquire lock
		local elapsed, err = lock:lock("ready")
		if elapsed == nil then
			logger:log(ERR, "lock:lock() failed : " .. err)
			return
		end

		-- Check if work is done
		local ok, err = datastore:get("misc_ready")
		if not ok and err ~= "not found" then
			logger:log(ERR, "datastore:get() failed : " .. err)
			local ok, err = lock:unlock()
			if not ok then
				logger:log(ERR, "lock:unlock() failed : " .. err)
			end
			return
		end
		if ok then
			local ok, err = lock:unlock()
			if not ok then
				logger:log(ERR, "lock:unlock() failed : " .. err)
			end
			return
		end

		logger:log(INFO, "init_worker phase started")

		-- Get plugins order
		local order, err = datastore:get("plugins_order", true)
		if not order then
			logger:log(ERR, "can't get plugins order from datastore : " .. err)
			local ok, err = lock:unlock()
			if not ok then
				logger:log(ERR, "lock:unlock() failed : " .. err)
			end
			return
		end

		-- Call init_worker() methods
		logger:log(INFO, "calling init_worker() methods of plugins ...")
		for i, plugin_id in ipairs(order.init_worker) do
			-- Require call
			local plugin_lua, err = require_plugin(plugin_id)
			if plugin_lua == false then
				logger:log(ERR, err)
			elseif plugin_lua == nil then
				logger:log(INFO, err)
			else
				-- Check if plugin has init_worker method
				if plugin_lua.init_worker ~= nil then
					-- New call
					local ok, plugin_obj = new_plugin(plugin_lua)
					if not ok then
						logger:log(ERR, plugin_obj)
					else
						local ok, ret = call_plugin(plugin_obj, "init_worker")
						if not ok then
							logger:log(ERR, ret)
						elseif not ret.ret then
							logger:log(ERR, plugin_id .. ":init_worker() call failed : " .. ret.msg)
						else
							logger:log(INFO, plugin_id .. ":init_worker() call successful : " .. ret.msg)
						end
					end
				else
					logger:log(INFO, "skipped execution of " .. plugin_id .. " because method init_worker() is not defined")
				end
			end
		end
		logger:log(INFO, "called init_worker() methods of plugins")

		-- End
		local ok, err = datastore:set("misc_ready", "ok")
		if not ok then
			logger:log(ERR, "datastore:set() failed : " .. err)
		end
		local ok, err = lock:unlock()
		if not ok then
			logger:log(ERR, "lock:unlock() failed : " .. err)
		end
		logger:log(INFO, "init phase ended")

		local res, err = remove("/var/tmp/bunkerweb_reloading")
		if not res and err ~= "No such file or directory" then
			logger:log(WARN, "unable to remove /var/tmp/bunkerweb_reloading file: " .. err)
		end

		logger:log(NOTICE, "BunkerWeb is ready to fool hackers ! ðŸš€")
	end

	-- Start timer
	timer_at(5, ready_work)
}
