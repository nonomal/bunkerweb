{% if USE_MODSECURITY_GLOBAL_CRS == "yes" %}
  {%- set pathlib = import("pathlib") -%}
  {%- set json = import("json") -%}

# Process rules with disruptive actions
  {% if SECURITY_MODE == "block" -%}
SecRuleEngine {{ MODSECURITY_SEC_RULE_ENGINE }}
  {% else -%}
SecRuleEngine DetectionOnly
  {% endif %}

# Allow body checks
SecRequestBodyAccess On

# Enable XML parsing
SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
  "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"

# Enable JSON parsing
SecRule REQUEST_HEADERS:Content-Type "application/json" \
  "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

# Maximum data size (Generated from MAX_CLIENT_SIZE)
  {% if MAX_CLIENT_SIZE.endswith("k") or MAX_CLIENT_SIZE.endswith("K") -%}
SecRequestBodyLimit {{ MAX_CLIENT_SIZE[:-1] | int * 1024 }}
  {% elif MAX_CLIENT_SIZE.endswith("m") or MAX_CLIENT_SIZE.endswith("M") -%}
SecRequestBodyLimit {{ MAX_CLIENT_SIZE[:-1] | int * 1024 * 1024 }}
  {% elif MAX_CLIENT_SIZE.endswith("g") or MAX_CLIENT_SIZE.endswith("G") -%}
SecRequestBodyLimit {{ MAX_CLIENT_SIZE[:-1] | int * 1024 * 1024 * 1024 }}
  {% elif MAX_CLIENT_SIZE.isdigit() -%}
SecRequestBodyLimit {{ MAX_CLIENT_SIZE }}
  {% else -%}
SecRequestBodyLimit 13107200
  {% endif %}

# Maximum data size for requests without files
SecRequestBodyNoFilesLimit {{ MODSECURITY_REQ_BODY_NO_FILES_LIMIT }}

# Reject requests if bigger than max data size
SecRequestBodyLimitAction Reject

# Reject if we can't process the body
SecRule REQBODY_ERROR "!@eq 0" \
  "id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"

# Be strict with multipart/form-data body
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
  "id:'200003',phase:2,t:none,log,deny,status:400, \
  msg:'Multipart request body failed strict validation: \
  PE %{REQBODY_PROCESSOR_ERROR}, \
  BQ %{MULTIPART_BOUNDARY_QUOTED}, \
  BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
  DB %{MULTIPART_DATA_BEFORE}, \
  DA %{MULTIPART_DATA_AFTER}, \
  HF %{MULTIPART_HEADER_FOLDING}, \
  LF %{MULTIPART_LF_LINE}, \
  SM %{MULTIPART_MISSING_SEMICOLON}, \
  IQ %{MULTIPART_INVALID_QUOTING}, \
  IP %{MULTIPART_INVALID_PART}, \
  IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
  FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"
SecRule MULTIPART_UNMATCHED_BOUNDARY "@eq 1" \
  "id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"

# Enable response body checks
SecResponseBodyAccess On
SecResponseBodyMimeType text/plain text/html text/xml application/json
SecResponseBodyLimit 524288
SecResponseBodyLimitAction ProcessPartial

# Log useful stuff
SecAuditEngine {{ MODSECURITY_SEC_AUDIT_ENGINE }}
SecAuditLogParts {{ MODSECURITY_SEC_AUDIT_LOG_PARTS }}
SecAuditLogType Serial
SecAuditLog /var/log/bunkerweb/modsec_audit.log

# unset REASON* env vars
SecAction "nolog,phase:1,setenv:REASON=none,setenv:REASON_DATA=none"

# Auto update allowed methods (Generated from ALLOWED_METHODS)
  {% if MULTISITE == "no" %}
SecAction \
 "id:900200,\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.allowed_methods={{ ALLOWED_METHODS.replace("|", " ") }}'"
  {% else %}
    {%- set allowed_methods_list = [] -%}
    {%- for server_name in SERVER_NAME.split(" ") -%}
      {%- set server_allowed_methods = all[server_name + "_ALLOWED_METHODS"].split("|") -%}
      {%- for method in server_allowed_methods -%}
        {%- if method not in allowed_methods_list -%}
          {%- set tmp = allowed_methods_list.append(method) -%}
        {%- endif -%}
      {%- endfor -%}
    {%- endfor -%}
# Auto update allowed methods (Generated from all server-specific ALLOWED_METHODS)
SecAction \
 "id:900200,\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.allowed_methods={{ allowed_methods_list | join(" ") }}'"
  {% endif %}

  {% if USE_MODSECURITY_CRS == "yes" -%}
# include OWASP CRS configurations
    {% if MODSECURITY_CRS_VERSION == "nightly" %}
      {%- if pathlib.Path("/var/cache/bunkerweb/modsecurity/crs/nightly/crs-setup-nightly.conf").is_file() %}
include /var/cache/bunkerweb/modsecurity/crs/nightly/crs-setup-nightly.conf
      {%- else %}
# fallback to the default CRS setup as the nightly one is not available
include /usr/share/bunkerweb/core/modsecurity/files/crs-setup-v4.conf
      {%- endif %}
    {% else %}
include /usr/share/bunkerweb/core/modsecurity/files/crs-setup-v{{ MODSECURITY_CRS_VERSION }}.conf
    {% endif %}

    {% if USE_MODSECURITY_CRS_PLUGINS == "yes" and MODSECURITY_CRS_VERSION != "3" -%}
# custom CRS plugins configurations before loading plugins
      {% if is_custom_conf("/etc/bunkerweb/configs/crs-plugins-before") %}
include /etc/bunkerweb/configs/crs-plugins-before/*.conf
      {% endif %}
      {% if is_custom_conf("/etc/nginx/crs-plugins-before") %}
include /etc/nginx/crs-plugins-before/*.conf
      {% endif %}
    {% endif %}

# custom CRS configurations before loading rules (e.g. exclusions)
    {% if is_custom_conf("/etc/bunkerweb/configs/modsec-crs") %}
include /etc/bunkerweb/configs/modsec-crs/*.conf
    {% endif %}
    {% if is_custom_conf("/etc/nginx/modsec-crs") %}
include /etc/nginx/modsec-crs/*.conf
    {% endif %}
include /etc/nginx/http/*.modsec-crs

# Check if client is whitelisted
SecRule ENV:is_whitelisted "yes" "id:1000,phase:1,allow,nolog,ctl:ruleEngine=Off"

# include OWASP CRS rules
    {% if MODSECURITY_CRS_VERSION == "nightly" %}
      {%- if pathlib.Path("/var/cache/bunkerweb/modsecurity/crs/nightly/crs-nightly/rules").is_dir() %}
include /var/cache/bunkerweb/modsecurity/crs/nightly/crs-nightly/rules/*.conf
      {%- else %}
# fallback to the default CRS setup as the nightly one is not available
include /usr/share/bunkerweb/core/modsecurity/files/coreruleset-v4/rules/*.conf
      {%- endif %}
    {% else %}
include /usr/share/bunkerweb/core/modsecurity/files/coreruleset-v{{ MODSECURITY_CRS_VERSION }}/rules/*.conf
    {% endif %}

    {% if USE_MODSECURITY_CRS_PLUGINS == "yes" and MODSECURITY_CRS_VERSION != "3" %}
# custom CRS plugins configurations after loading plugins
      {%- if is_custom_conf("/etc/bunkerweb/configs/crs-plugins-after") %}
include /etc/bunkerweb/configs/crs-plugins-after/*.conf
      {%- endif %}
      {% if is_custom_conf("/etc/nginx/crs-plugins-after") %}
include /etc/nginx/crs-plugins-after/*.conf
      {% endif %}
    {% endif %}

# set REASON env var
SecRuleUpdateActionById 949110 "t:none,deny,status:{{ DENY_HTTP_STATUS }},setenv:REASON=modsecurity,setenv:REASON_DATA=%{TX.BUNKERWEB_RULES}"
SecRuleUpdateActionById 959100 "t:none,deny,status:{{ DENY_HTTP_STATUS }},setenv:REASON=modsecurity,setenv:REASON_DATA=%{TX.BUNKERWEB_RULES}"

# let BW manage when method is not allowed (and save up some computing)
SecRuleUpdateActionById 911100 "t:none,allow,nolog"
  {% endif +%}
{% endif %}
